AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys Suse Cloud Application Platform into an existing Kubernetes Cluster (qs-1p817shrd)
Parameters:
  HelmLambdaArn:
    Type: String
  KubeManifestLambdaArn:
    Type: String
  KubeConfigPath:
    Type: String
  KubeConfigKmsContext:
    Type: String
    Default: "EKSQuickStart"
  NodeInstanceProfile:
    Type: String
  HostedZoneID:
    Description: 'Route 53 Hosted Zone ID to use'
    Type: String
  DomainName:
    Description: 'domain name configured for the cluster'
    Type: String
  PrivateSubnet1ID:
    Type: String
  PrivateSubnet2ID:
    Type: String
  PrivateSubnet3ID:
    Type: String
  QSS3BucketName:
    Type: String
  QSS3KeyPrefix:
    Type: String
    Default: quickstart-suse-cloud-application-platform/
  KeyPairName:
    Description: The name of an existing public/private key pair, which allows you
      to securely connect to your instance after it launches
    Type: AWS::EC2::KeyPair::KeyName
  VPCID:
    Type: "AWS::EC2::VPC::Id"
  NodeInstanceType:
    Default: m5.large
    AllowedValues:
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
      - r5.24xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.12xlarge
      - r5d.24xlarge
      - z1d.large
      - z1d.xlarge
      - z1d.2xlarge
      - z1d.3xlarge
      - z1d.6xlarge
      - z1d.12xlarge
    ConstraintDescription: Must be a valid EC2 instance type
    Description: Type of EC2 instance for the Node instances
    Type: String
  NumberOfNodes:
    Default: 3
    Description: Number of EKS node instances
    Type: Number
  NodeGroupName:
    Default: CAP-Infra
    Description: Name for EKS node group
    Type: String
  NodeVolumeSize:
    Default: 20
    Description: Size for node volumes
    Type: String
  ControlPlaneSecurityGroup:
    Type: String
  EKSClusterName:
    Type: String
  KubernetesVersion:
    Type: String
    AllowedValues: [ "1.11", "1.10" ]
    Default: "1.11"
  UaaPassword:
    Type: String
    NoEcho: true
  AdminPassword:
    Type: String
    NoEcho: true
  NodeInstanceRoleName:
    Type: String
Resources:
  #Route53WildCard:
  #  Type: AWS::Route53::RecordSet
  #  Properties:
  #    Type: A
  #    Name: !Sub '*.${DomainName}'
  #    AliasTarget:
  #      HostedZoneId: !GetAtt 'ExternalNlb.CanonicalHostedZoneID'
  #      DNSName: !GetAtt 'ExternalNlb.DNSName'
  #    HostedZoneId: !Ref 'HostedZoneID'
  #Route53ApexRecord:
  #  Type: AWS::Route53::RecordSet
  #  Properties:
  #    Type: A
  #    Name: !Ref 'DomainName'
  #    AliasTarget:
  #      HostedZoneId: !GetAtt 'ExternalNlb.CanonicalHostedZoneID'
  #      DNSName: !GetAtt 'ExternalNlb.DNSName'
  #    HostedZoneId: !Ref 'HostedZoneID'
  UaaNamespace:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    DependsOn: NodeGroupStack
    Properties:
      ServiceToken: !Ref KubeManifestLambdaArn
      KubeConfigPath: !Ref KubeConfigPath
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      Manifest:
        kind: Namespace
        apiVersion: v1
        metadata:
          name: cap-uaa
  Uaa:
    Type: "Custom::Helm"
    DependsOn: NodeGroupStack
    Version: '1.0'
    Properties:
      ServiceToken: !Ref HelmLambdaArn
      KubeConfigPath: !Ref KubeConfigPath
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      RepoUrl: https://kubernetes-charts.suse.com/
      Chart: suse/uaa
      Namespace: !GetAtt UaaNamespace.name
      Async: true
      Values:
        env.DOMAIN: !Ref DomainName
        env.UAA_HOST: !Sub "uaa.${DomainName}"
        secrets.UAA_ADMIN_CLIENT_SECRET: !Ref UaaPassword
        secrets.CLUSTER_ADMIN_PASSWORD: !Ref AdminPassword
      ValueYaml: |
        env:
          UAA_PORT: 2793
          GARDEN_ROOTFS_DRIVER: overlay-xfs
          GARDEN_APPARMOR_PROFILE: ""
        sizing:
          cc_uploader:
            capabilities: ["SYS_RESOURCE"]
            affinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms: [matchExpressions: [ {key: nodegroup, operator: In, values: [ CapInfra ] } ]]
            count: 2
          diego_api:
            capabilities: ["SYS_RESOURCE"]
            affinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms: [matchExpressions: [ {key: nodegroup, operator: In, values: [ CapInfra ] } ]]
            count: 2
          diego_brain:
            capabilities: ["SYS_RESOURCE"]
            affinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms: [matchExpressions: [ {key: nodegroup, operator: In, values: [ CapInfra ] } ]]
            count: 2
          diego_ssh:
            capabilities: ["SYS_RESOURCE"]
            affinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms: [matchExpressions: [ {key: nodegroup, operator: In, values: [ CapInfra ] } ]]
            count: 2
          nats:
            capabilities: ["SYS_RESOURCE"]
            affinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms: [matchExpressions: [ {key: nodegroup, operator: In, values: [ CapInfra ] } ]]
            count: 2
          router:
            capabilities: ["SYS_RESOURCE"]
            affinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms: [matchExpressions: [ {key: nodegroup, operator: In, values: [ CapInfra ] } ]]
            count: 2
          routing_api:
            capabilities: ["SYS_RESOURCE"]
            affinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms: [matchExpressions: [ {key: nodegroup, operator: In, values: [ CapInfra ] } ]]
            count: 2
          mysql:
            affinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms: [matchExpressions: [ {key: nodegroup, operator: In, values: [ CapInfra ] } ]]
            count: 2
          secret_generation:
            affinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms: [matchExpressions: [ {key: nodegroup, operator: In, values: [ CapInfra ] } ]]
          uaa:
            affinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms: [matchExpressions: [ {key: nodegroup, operator: In, values: [ CapInfra ] } ]]
            count: 2
        services:
            loadbalanced: true
        kube:
          storage_class:
            persistent: gp2
            shared: gp2
        registry:
          hostname: "registry.suse.com"
          username: ""
          password: ""
          organization: "cap"
        auth: rbac
  NodeGroupStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub 'https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}submodules/quickstart-amazon-eks/templates/amazon-eks-nodegroup.template.yaml'
      Parameters:
        KeyPairName: !Ref 'KeyPairName'
        PrivateSubnet1ID: !Ref PrivateSubnet1ID
        PrivateSubnet2ID: !Ref PrivateSubnet2ID
        PrivateSubnet3ID: !Ref PrivateSubnet3ID
        VPCID: !Ref VPCID
        NodeInstanceType: !Ref NodeInstanceType
        NumberOfNodes: !Ref NumberOfNodes
        NodeGroupName: !Ref NodeGroupName
        NodeVolumeSize: !Ref NodeVolumeSize
        EKSControlPlane: !Ref EKSClusterName
        ControlPlaneSecurityGroup: !Ref ControlPlaneSecurityGroup
        NodeInstanceProfile: !Ref NodeInstanceProfile
        KubernetesVersion: !Ref KubernetesVersion
        BootstrapArguments: "--kubelet-extra-args --node-labels=nodegroup=CapInfra"
        NodeInstanceRoleName: !Ref NodeInstanceRoleName
